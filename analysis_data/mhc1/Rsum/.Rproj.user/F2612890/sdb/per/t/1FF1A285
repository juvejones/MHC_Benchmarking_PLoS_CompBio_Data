{
    "contents" : "library(ROCR)\nlibrary(pROC)\nlibrary(psychometric)\nlibrary(RColorBrewer)\n\n## Some constants\nCOLUMN_SEP = \"\\t\"\n## Plot individual alleles, need more colors\n#cols <- colorRampPalette(brewer.pal(n=9,name=\"Set1\"))(36)\n\n## Plot method summary, only ten colors needed\ncols <- colorRampPalette(brewer.pal(n=10,name=\"Set3\"))(10)\n\n### Function to calculate auc and srcc for individual allele ###\nallele_spec_plot <- function(input_file, output_file){\n\tdat <- read.table(input_file, sep=\"\", comment.char=\"#\")\n\twrite(\"Allele data group to be plotted\", stderr())\n\tprint(dat[[1]])\n\n## Initialize lists in the data frame\n\tdf <- data.frame(dat[[1]])\n\tauc_row <- list()\n\tsrcc_row <- list()\n\n## Look for matching filenames, open files, and do necessary operations\n  pdf(\"allele_roc.pdf\", width=4,height=4)\n\tfor (i in 1:length(dat[[1]])){\n\t\tprint(paste(\" Process Allele: \", dat[[1]][i], sep = \"\"))\n\t\tif (file.exists(paste(dat[[1]][i], \".txt\", sep = \"\"))){\n\t\t\tdatafile <- read.table(paste(dat[[1]][i], \".txt\", sep = \"\"),header=TRUE)\n\t\t}\n\t\telse{\n\t\t\tnext\n\t\t}\n\t\tpred <- prediction(datafile$predict,datafile$meas_bi)\n\t\tperf <- performance(pred,\"tpr\",\"fpr\")\n\t\tif (i == 1){\n\t\t\tplot(perf,main=\"ROC Curves\",col=cols[i],\n\t\t\t\txaxis.lwd=1.5,yaxis.lwd=1.5,cex.lab=1,xaxis.cex.axis=1,yaxis.cex.axis=1,add=FALSE)\n\t\t}\n\t\telse{\n\t\t\tplot(perf,main=\"ROC Curves\",col=cols[i],\n\t\t\t\txaxis.lwd=1.5,yaxis.lwd=1.5,cex.lab=1,xaxis.cex.axis=1,yaxis.cex.axis=1,add=TRUE)\n\t\t}\n\t##generate the random prediction line\n\t\tx_ran <- seq(0,1,length=10)\n\t\ty_ran <- seq(0,1,length=10)\n\t\tlines(x_ran,y_ran,col=\"gray50\",lwd=1,lty=2)\n\t\tlegend(\"bottomright\",legend=lapply(dat[[1]],as.character),col=cols,lwd=1.2,bty=\"n\",cex=0.4,ncol=2)\n\t\tperf_auc <- performance(pred,\"auc\",fpr.stop=1.0)\n\t\tauc_row[i] <- perf_auc@y.values\n\t\tsrcc_row[i] <- cor(datafile$meas_contin,datafile$predict,method=\"spearman\")\n\t}\n\tdf$auc <- auc_row\n\tdf$srcc <- srcc_row\n\twrite.table(as.matrix(df),output_file,col.names=F, row.names=T, append=F, sep=COLUMN_SEP)\n\tdev.off()\n}\n\n### Function to calculate auc and srcc for each method using summary.txt ###\nall_allele_bi_eval <- function(input_file){\n\tdatafile <- read.table(input_file, col.names=c(\"peptide\",\"meas_nm\",\"meas_bi\",\"meas_contin\",\"predict\",\"predict_rank\"), \n\t\tsep=COLUMN_SEP, header= FALSE, comment.char=\"#\")\n\tdata <- data.frame(datafile)\n\theaderline <- which(with(data,peptide==\"peptide\"))\n\tdata <- data[-headerline,]\n  \n  ##Here pROC package is used for getting ROC_CI\n\trocobj <- roc(as.numeric(data$meas_bi),as.numeric(data$predict),ci=TRUE,of=\"auc\")\n\tprint(rocobj$auc)\n\tprint(rocobj$ci)\n\tsrcc <- cor(as.numeric(data$meas_contin),as.numeric(data$predict),method=\"spearman\")\n\tsrcc_err <- CIr(r=srcc,n=nrow(data),level=.95)\n\tsprintf(\"%.4f    %.4f\", srcc, srcc_err)\n}\n\n### Function to plot auc curves for methods ###\nall_allele_bi_eval_plot <- function(methods){\n  pdf(\"methods_roc.pdf\", width=4,height=4)\n  for (i in 1:length(methods)){\n    method <- methods[i]\n    input_file <- paste(\"../\", method, \"/Rdata/summary.txt\", sep=\"\")\n    datafile <- read.table(input_file, col.names=c(\"peptide\",\"meas_nm\",\"meas_bi\",\"meas_contin\",\"predict\",\"predict_rank\"), \n                           sep=COLUMN_SEP, header= FALSE, comment.char=\"#\")\n    data <- data.frame(datafile)\n    headerline <- which(with(data,peptide==\"peptide\"))\n    data <- data[-headerline,]\n    pred <- prediction(as.numeric(data$predict),as.numeric(data$meas_bi))\n    perf <- performance(pred,\"tpr\",\"fpr\")\n    if (i == 1){\n      plot(perf,main=\"ROC Curves\",col=cols[i],lwd=1.5,\n           xaxis.lwd=1.5,yaxis.lwd=1.5,cex.lab=1,xaxis.cex.axis=1,yaxis.cex.axis=1,add=FALSE)\n    }\n    else{\n      plot(perf,main=\"ROC Curves\",col=cols[i],lwd=1.5,\n           xaxis.lwd=1.5,yaxis.lwd=1.5,cex.lab=1,xaxis.cex.axis=1,yaxis.cex.axis=1,add=TRUE)\n    }\n  }\n  ##generate the random prediction line\n  x_ran <- seq(0,1,length=10)\n  y_ran <- seq(0,1,length=10)\n  lines(x_ran,y_ran,col=\"gray50\",lwd=1,lty=2)\n  \n  ##generate legend and finish plot\n  legend(\"bottomright\",legend=lapply(methods,as.character),col=cols,lwd=1.5,bty=\"n\",cex=0.8,ncol=1)\n  dev.off()\n  \n  return(\"all_allele_bi_eval_plot\")\n}\n## Read list of alleles from a file\nargs=(commandArgs(TRUE))\nprint(args)\n\nif(length(args)<1){\n\twrite(\"ERROR: Invalid arguments supplied.\\n \n\t\tUsage: '--args allele_file=\\\"allele.txt\\\" input_file=\\\"summary.txt\\\" output_file=\\\"allele_stat.txt\\\"'\", stderr())\n\tstop(\"No arguments supplied.\")\n} else {\n\teval(parse(text=args[]))\n}\n\nmethods = c(\"smm\", \"smmpmbec\", \"ann\", \"netmhc4\", \"pickpocket\", \"consensus\", \"netmhcpan2.8\", \"netmhcpan3\", \"netmhccons\")\n\n## Functions return 'job' to reflect what has been done\n#job <- allele_spec_plot(allele_file, output_file)\njob1 <- all_allele_bi_eval(input_file)\njob2 <- all_allele_bi_eval_plot(methods)\n\nprint(paste(\"!Function:\",job1, \"Finished!\"))\nprint(paste(\"!Function:\",job2, \"Finished!\"))\n",
    "created" : 1477512193623.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2890184297",
    "id" : "1FF1A285",
    "lastKnownWriteTime" : 1477512406,
    "path" : "/SFS/user/ctc/zhaoweil/MHC1_IedbNewData_Results/project/Rsum/binary_class_eval.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}