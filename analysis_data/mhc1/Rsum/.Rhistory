data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(size=2)
p1 <- p1 + scale_fill_manual("red")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE)
p1 + geom_text(aes(x=0.5, y=0.75,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
ggsave(file="R2_50nM.jpeg", plot=p1, width=4, height=4, dpi=300)
library(ggplot2)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 22))
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(size=2)
p1 <- p1 + scale_fill_manual(values=c("red"))
p1 <- p1 + geom_smooth(method = "lm", se=FALSE)
p1 + geom_text(aes(x=0.5, y=0.75,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
ggsave(file="R2_50nM.jpeg", plot=p1, width=4, height=4, dpi=300)
library(ggplot2)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 22))
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(size=2)
p1 <- p1 + scale_fill_manual(values=c("red","blue"))
p1 <- p1 + geom_smooth(method = "lm", se=FALSE)
p1 + geom_text(aes(x=0.5, y=0.75,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
#ggsave(file="R2_50nM.jpeg", plot=p1, width=4, height=4, dpi=300)
library(ggplot2)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 22))
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21)
p1 <- p1 + geom_smooth(method = "lm", se=FALSE)
p1 + geom_text(aes(x=0.5, y=0.75,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
#ggsave(file="R2_50nM.jpeg", plot=p1, width=4, height=4, dpi=300)
library(ggplot2)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 22))
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21, fill="blue")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE)
p1 + geom_text(aes(x=0.5, y=0.75,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
#ggsave(file="R2_50nM.jpeg", plot=p1, width=4, height=4, dpi=300)
library(ggplot2)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 22))
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21, fill="blue")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE, color="red")
p1 + geom_text(aes(x=0.5, y=0.75,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
#ggsave(file="R2_50nM.jpeg", plot=p1, width=4, height=4, dpi=300)
ggsave(file="R2_50nM.jpeg", plot=p1, width=4, height=4, dpi=300)
library(ggplot2)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 22))
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21, fill="blue")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE, color="red")
p1 <- p1 + geom_text(aes(x=0.65, y=0.9,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 <- p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
ggsave(file="R2_50nM.jpeg", plot=p1, width=4, height=4, dpi=300)
library(ggplot2)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 20))
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21, fill="red")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE, color="black")
p1 <- p1 + geom_text(aes(x=0.65, y=0.9,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 <- p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p1 <- p1 + ggtitle("NetMHC4")
datafile2 <- read.table("/home/zhaoweil/MHC2_IedbNewData_Results/project/nn_align/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data2 <- data.frame(datafile2)
headerline2 <- which (with(data2,peptide=="peptide"))
data2 <- data2[-headerline2,]
data2 <- data2[which (with(data2, as.numeric(as.character(meas_contin))>0.6)),]
data2$meas <- as.numeric(as.character(data2$meas_contin))
data2$pred <- as.numeric(as.character(data2$predict))
m <- lm(pred ~ meas, data2)
p2 <- ggplot(data2, aes(meas, pred))
p2 <- p2 + geom_point(shape=21, fill="red")
p2 <- p2 + geom_smooth(method = "lm", se=FALSE, color="black")
p2 <- p2 + geom_text(aes(x=0.65, y=0.9,label = lm_eqn(lm(pred ~ meas, data2))), parse = TRUE)
p2 <- p2 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p2 <- p2 + ggtitle("nn_align")
g <- grid.arrange(arrangeGrob(p1, p2, nrow=1))
ggsave(file="R2_50nM.jpeg", plot=g, width=8, height=4, dpi=300)
library(ggplot2)
library(gridExtra)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 20))
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21, fill="red")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE, color="black")
p1 <- p1 + geom_text(aes(x=0.65, y=0.9,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 <- p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p1 <- p1 + ggtitle("NetMHC4")
datafile2 <- read.table("/home/zhaoweil/MHC2_IedbNewData_Results/project/nn_align/Rdata/summary.txt", col.names=c("peptide","binding_core","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data2 <- data.frame(datafile2)
headerline2 <- which (with(data2,peptide=="peptide"))
data2 <- data2[-headerline2,]
data2 <- data2[which (with(data2, as.numeric(as.character(meas_contin))>0.6)),]
data2$meas <- as.numeric(as.character(data2$meas_contin))
data2$pred <- as.numeric(as.character(data2$predict))
m <- lm(pred ~ meas, data2)
p2 <- ggplot(data2, aes(meas, pred))
p2 <- p2 + geom_point(shape=21, fill="red")
p2 <- p2 + geom_smooth(method = "lm", se=FALSE, color="black")
p2 <- p2 + geom_text(aes(x=0.65, y=0.9,label = lm_eqn(lm(pred ~ meas, data2))), parse = TRUE)
p2 <- p2 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p2 <- p2 + ggtitle("nn_align")
g <- grid.arrange(arrangeGrob(p1, p2, nrow=1))
ggsave(file="R2_50nM.jpeg", plot=g, width=8, height=4, dpi=300)
library(ggplot2)
library(gridExtra)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 20))
jpeg(filename="R2_50nM.jpeg", width=10, height=5, units="in", res=600)
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21, fill="red")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE, color="black")
p1 <- p1 + geom_text(aes(x=0.65, y=0.9,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 <- p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p1 <- p1 + ggtitle("NetMHC4")
datafile2 <- read.table("/home/zhaoweil/MHC2_IedbNewData_Results/project/nn_align/Rdata/summary.txt", col.names=c("peptide","binding_core","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data2 <- data.frame(datafile2)
headerline2 <- which (with(data2,peptide=="peptide"))
data2 <- data2[-headerline2,]
data2 <- data2[which (with(data2, as.numeric(as.character(meas_contin))>0.6)),]
data2$meas <- as.numeric(as.character(data2$meas_contin))
data2$pred <- as.numeric(as.character(data2$predict))
m <- lm(pred ~ meas, data2)
p2 <- ggplot(data2, aes(meas, pred))
p2 <- p2 + geom_point(shape=21, fill="red")
p2 <- p2 + geom_smooth(method = "lm", se=FALSE, color="black")
p2 <- p2 + geom_text(aes(x=0.65, y=0.9,label = lm_eqn(lm(pred ~ meas, data2))), parse = TRUE)
p2 <- p2 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p2 <- p2 + ggtitle("nn_align")
g <- grid.arrange(arrangeGrob(p1, p2, nrow=1))
dev.off()
library(ggplot2)
library(gridExtra)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 20))
jpeg(filename="R2_50nM.jpeg", width=10, height=5, units="in", res=300)
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21, fill="grey")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE, color="red")
p1 <- p1 + geom_text(aes(x=0.65, y=0.9,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 <- p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p1 <- p1 + ggtitle("NetMHC4")
datafile2 <- read.table("/home/zhaoweil/MHC2_IedbNewData_Results/project/nn_align/Rdata/summary.txt", col.names=c("peptide","binding_core","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data2 <- data.frame(datafile2)
headerline2 <- which (with(data2,peptide=="peptide"))
data2 <- data2[-headerline2,]
data2 <- data2[which (with(data2, as.numeric(as.character(meas_contin))>0.6)),]
data2$meas <- as.numeric(as.character(data2$meas_contin))
data2$pred <- as.numeric(as.character(data2$predict))
m <- lm(pred ~ meas, data2)
p2 <- ggplot(data2, aes(meas, pred))
p2 <- p2 + geom_point(shape=21, fill="grey")
p2 <- p2 + geom_smooth(method = "lm", se=FALSE, color="red")
p2 <- p2 + geom_text(aes(x=0.65, y=0.9,label = lm_eqn(lm(pred ~ meas, data2))), parse = TRUE)
p2 <- p2 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p2 <- p2 + ggtitle("nn_align")
g <- grid.arrange(arrangeGrob(p1, p2, nrow=1))
dev.off()
library(ggplot2)
library(gridExtra)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 20))
jpeg(filename="R2_50nM.jpeg", width=10, height=5, units="in", res=300)
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21, fill="grey")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE, color="red")
p1 <- p1 + geom_text(aes(x=0.7, y=1.0,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 <- p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p1 <- p1 + ggtitle("NetMHC4")
datafile2 <- read.table("/home/zhaoweil/MHC2_IedbNewData_Results/project/nn_align/Rdata/summary.txt", col.names=c("peptide","binding_core","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data2 <- data.frame(datafile2)
headerline2 <- which (with(data2,peptide=="peptide"))
data2 <- data2[-headerline2,]
data2 <- data2[which (with(data2, as.numeric(as.character(meas_contin))>0.6)),]
data2$meas <- as.numeric(as.character(data2$meas_contin))
data2$pred <- as.numeric(as.character(data2$predict))
m <- lm(pred ~ meas, data2)
p2 <- ggplot(data2, aes(meas, pred))
p2 <- p2 + geom_point(shape=21, fill="grey")
p2 <- p2 + geom_smooth(method = "lm", se=FALSE, color="red")
p2 <- p2 + geom_text(aes(x=0.7, y=1.0,label = lm_eqn(lm(pred ~ meas, data2))), parse = TRUE)
p2 <- p2 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p2 <- p2 + ggtitle("nn_align")
g <- grid.arrange(arrangeGrob(p1, p2, nrow=1))
dev.off()
library(ggplot2)
library(gridExtra)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 20))
jpeg(filename="R2_50nM.jpeg", width=10, height=5, units="in", res=300)
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21, fill="lightblue")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE, color="red", weight=5)
p1 <- p1 + geom_text(aes(x=0.7, y=1.0,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 <- p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p1 <- p1 + ggtitle("NetMHC4")
datafile2 <- read.table("/home/zhaoweil/MHC2_IedbNewData_Results/project/nn_align/Rdata/summary.txt", col.names=c("peptide","binding_core","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data2 <- data.frame(datafile2)
headerline2 <- which (with(data2,peptide=="peptide"))
data2 <- data2[-headerline2,]
data2 <- data2[which (with(data2, as.numeric(as.character(meas_contin))>0.6)),]
data2$meas <- as.numeric(as.character(data2$meas_contin))
data2$pred <- as.numeric(as.character(data2$predict))
m <- lm(pred ~ meas, data2)
p2 <- ggplot(data2, aes(meas, pred))
p2 <- p2 + geom_point(shape=21, fill="lightblue")
p2 <- p2 + geom_smooth(method = "lm", se=FALSE, color="red", weight=5)
p2 <- p2 + geom_text(aes(x=0.7, y=1.0,label = lm_eqn(lm(pred ~ meas, data2))), parse = TRUE)
p2 <- p2 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p2 <- p2 + ggtitle("nn_align")
g <- grid.arrange(arrangeGrob(p1, p2, nrow=1))
dev.off()
library(ggplot2)
library(gridExtra)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 20))
jpeg(filename="R2_50nM.jpeg", width=10, height=5, units="in", res=300)
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21, fill="dogerblue")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE, color="red", size=20)
p1 <- p1 + geom_text(aes(x=0.7, y=1.0,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 <- p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p1 <- p1 + ggtitle("NetMHC4")
datafile2 <- read.table("/home/zhaoweil/MHC2_IedbNewData_Results/project/nn_align/Rdata/summary.txt", col.names=c("peptide","binding_core","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data2 <- data.frame(datafile2)
headerline2 <- which (with(data2,peptide=="peptide"))
data2 <- data2[-headerline2,]
data2 <- data2[which (with(data2, as.numeric(as.character(meas_contin))>0.6)),]
data2$meas <- as.numeric(as.character(data2$meas_contin))
data2$pred <- as.numeric(as.character(data2$predict))
m <- lm(pred ~ meas, data2)
p2 <- ggplot(data2, aes(meas, pred))
p2 <- p2 + geom_point(shape=21, fill="dogerblue")
p2 <- p2 + geom_smooth(method = "lm", se=FALSE, color="red", size=20)
p2 <- p2 + geom_text(aes(x=0.7, y=1.0,label = lm_eqn(lm(pred ~ meas, data2))), parse = TRUE)
p2 <- p2 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p2 <- p2 + ggtitle("nn_align")
g <- grid.arrange(arrangeGrob(p1, p2, nrow=1))
dev.off()
library(ggplot2)
library(gridExtra)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 20))
jpeg(filename="R2_50nM.jpeg", width=10, height=5, units="in", res=300)
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21, fill="dodgerblue")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE, color="red", size=20)
p1 <- p1 + geom_text(aes(x=0.7, y=1.0,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 <- p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p1 <- p1 + ggtitle("NetMHC4")
datafile2 <- read.table("/home/zhaoweil/MHC2_IedbNewData_Results/project/nn_align/Rdata/summary.txt", col.names=c("peptide","binding_core","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data2 <- data.frame(datafile2)
headerline2 <- which (with(data2,peptide=="peptide"))
data2 <- data2[-headerline2,]
data2 <- data2[which (with(data2, as.numeric(as.character(meas_contin))>0.6)),]
data2$meas <- as.numeric(as.character(data2$meas_contin))
data2$pred <- as.numeric(as.character(data2$predict))
m <- lm(pred ~ meas, data2)
p2 <- ggplot(data2, aes(meas, pred))
p2 <- p2 + geom_point(shape=21, fill="dodgerblue")
p2 <- p2 + geom_smooth(method = "lm", se=FALSE, color="red", size=20)
p2 <- p2 + geom_text(aes(x=0.7, y=1.0,label = lm_eqn(lm(pred ~ meas, data2))), parse = TRUE)
p2 <- p2 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p2 <- p2 + ggtitle("nn_align")
g <- grid.arrange(arrangeGrob(p1, p2, nrow=1))
dev.off()
library(ggplot2)
library(gridExtra)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 20))
jpeg(filename="R2_50nM.jpeg", width=10, height=5, units="in", res=300)
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21, fill="dodgerblue")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE, color="red", size=6)
p1 <- p1 + geom_text(aes(x=0.7, y=1.0,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 <- p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p1 <- p1 + ggtitle("NetMHC4")
datafile2 <- read.table("/home/zhaoweil/MHC2_IedbNewData_Results/project/nn_align/Rdata/summary.txt", col.names=c("peptide","binding_core","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data2 <- data.frame(datafile2)
headerline2 <- which (with(data2,peptide=="peptide"))
data2 <- data2[-headerline2,]
data2 <- data2[which (with(data2, as.numeric(as.character(meas_contin))>0.6)),]
data2$meas <- as.numeric(as.character(data2$meas_contin))
data2$pred <- as.numeric(as.character(data2$predict))
m <- lm(pred ~ meas, data2)
p2 <- ggplot(data2, aes(meas, pred))
p2 <- p2 + geom_point(shape=21, fill="dodgerblue")
p2 <- p2 + geom_smooth(method = "lm", se=FALSE, color="red", size=6)
p2 <- p2 + geom_text(aes(x=0.7, y=1.0,label = lm_eqn(lm(pred ~ meas, data2))), parse = TRUE)
p2 <- p2 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p2 <- p2 + ggtitle("nn_align")
g <- grid.arrange(arrangeGrob(p1, p2, nrow=1))
dev.off()
library(ggplot2)
library(gridExtra)
lm_eqn <- function(m){
eq <- substitute(~~italic(r)^2~"="~r2, list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
theme_set(theme_bw(base_size = 20))
jpeg(filename="R2_50nM.jpeg", width=10, height=5, units="in", res=300)
datafile <- read.table("../NetMHC4/Rdata/summary.txt", col.names=c("peptide","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data <- data.frame(datafile)
headerline <- which (with(data,peptide=="peptide"))
data <- data[-headerline,]
data <- data[which (with(data, as.numeric(as.character(meas_contin))>0.6)),]
data$meas <- as.numeric(as.character(data$meas_contin))
data$pred <- as.numeric(as.character(data$predict))
m <- lm(pred ~ meas, data)
p1 <- ggplot(data, aes(meas, pred))
p1 <- p1 + geom_point(shape=21, fill="dodgerblue")
p1 <- p1 + geom_smooth(method = "lm", se=FALSE, color="red", size=2)
p1 <- p1 + geom_text(aes(x=0.7, y=1.0,label = lm_eqn(lm(pred ~ meas, data))), parse = TRUE)
p1 <- p1 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p1 <- p1 + ggtitle("NetMHC4")
datafile2 <- read.table("/home/zhaoweil/MHC2_IedbNewData_Results/project/nn_align/Rdata/summary.txt", col.names=c("peptide","binding_core","meas_nm","meas_bi","meas_contin","predict","predict_rank"),sep="\t", header= FALSE, comment.char="#")
data2 <- data.frame(datafile2)
headerline2 <- which (with(data2,peptide=="peptide"))
data2 <- data2[-headerline2,]
data2 <- data2[which (with(data2, as.numeric(as.character(meas_contin))>0.6)),]
data2$meas <- as.numeric(as.character(data2$meas_contin))
data2$pred <- as.numeric(as.character(data2$predict))
m <- lm(pred ~ meas, data2)
p2 <- ggplot(data2, aes(meas, pred))
p2 <- p2 + geom_point(shape=21, fill="dodgerblue")
p2 <- p2 + geom_smooth(method = "lm", se=FALSE, color="red", size=2)
p2 <- p2 + geom_text(aes(x=0.7, y=1.0,label = lm_eqn(lm(pred ~ meas, data2))), parse = TRUE)
p2 <- p2 + ylim(0.0,1.0)+ ylab("Prediction") + xlab("Measurement")
p2 <- p2 + ggtitle("nn_align")
g <- grid.arrange(arrangeGrob(p1, p2, nrow=1))
dev.off()
